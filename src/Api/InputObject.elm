-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildCountryInfoCondition :
    (CountryInfoConditionOptionalFields -> CountryInfoConditionOptionalFields)
    -> CountryInfoCondition
buildCountryInfoCondition fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, capital = Absent, phoneCode = Absent }
    in
    { id = optionals____.id, name = optionals____.name, capital = optionals____.capital, phoneCode = optionals____.phoneCode }


type alias CountryInfoConditionOptionalFields =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , capital : OptionalArgument String
    , phoneCode : OptionalArgument String
    }


{-| Type for the CountryInfoCondition input object.
-}
type alias CountryInfoCondition =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , capital : OptionalArgument String
    , phoneCode : OptionalArgument String
    }


{-| Encode a CountryInfoCondition into a value that can be used as an argument.
-}
encodeCountryInfoCondition : CountryInfoCondition -> Value
encodeCountryInfoCondition input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "name", Encode.string |> Encode.optional input____.name ), ( "capital", Encode.string |> Encode.optional input____.capital ), ( "phoneCode", Encode.string |> Encode.optional input____.phoneCode ) ]


buildCountryInfoInput :
    CountryInfoInputRequiredFields
    -> (CountryInfoInputOptionalFields -> CountryInfoInputOptionalFields)
    -> CountryInfoInput
buildCountryInfoInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent }
    in
    { id = optionals____.id, name = required____.name, capital = required____.capital, phoneCode = required____.phoneCode }


type alias CountryInfoInputRequiredFields =
    { name : String
    , capital : String
    , phoneCode : String
    }


type alias CountryInfoInputOptionalFields =
    { id : OptionalArgument Int }


{-| Type for the CountryInfoInput input object.
-}
type alias CountryInfoInput =
    { id : OptionalArgument Int
    , name : String
    , capital : String
    , phoneCode : String
    }


{-| Encode a CountryInfoInput into a value that can be used as an argument.
-}
encodeCountryInfoInput : CountryInfoInput -> Value
encodeCountryInfoInput input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "name", Encode.string input____.name |> Just ), ( "capital", Encode.string input____.capital |> Just ), ( "phoneCode", Encode.string input____.phoneCode |> Just ) ]


buildCountryInfoPatch :
    (CountryInfoPatchOptionalFields -> CountryInfoPatchOptionalFields)
    -> CountryInfoPatch
buildCountryInfoPatch fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, capital = Absent, phoneCode = Absent }
    in
    { id = optionals____.id, name = optionals____.name, capital = optionals____.capital, phoneCode = optionals____.phoneCode }


type alias CountryInfoPatchOptionalFields =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , capital : OptionalArgument String
    , phoneCode : OptionalArgument String
    }


{-| Type for the CountryInfoPatch input object.
-}
type alias CountryInfoPatch =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , capital : OptionalArgument String
    , phoneCode : OptionalArgument String
    }


{-| Encode a CountryInfoPatch into a value that can be used as an argument.
-}
encodeCountryInfoPatch : CountryInfoPatch -> Value
encodeCountryInfoPatch input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "name", Encode.string |> Encode.optional input____.name ), ( "capital", Encode.string |> Encode.optional input____.capital ), ( "phoneCode", Encode.string |> Encode.optional input____.phoneCode ) ]


buildCreateCountryInfoInput :
    CreateCountryInfoInputRequiredFields
    -> (CreateCountryInfoInputOptionalFields -> CreateCountryInfoInputOptionalFields)
    -> CreateCountryInfoInput
buildCreateCountryInfoInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, countryInfo = required____.countryInfo }


type alias CreateCountryInfoInputRequiredFields =
    { countryInfo : CountryInfoInput }


type alias CreateCountryInfoInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateCountryInfoInput input object.
-}
type alias CreateCountryInfoInput =
    { clientMutationId : OptionalArgument String
    , countryInfo : CountryInfoInput
    }


{-| Encode a CreateCountryInfoInput into a value that can be used as an argument.
-}
encodeCreateCountryInfoInput : CreateCountryInfoInput -> Value
encodeCreateCountryInfoInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "countryInfo", encodeCountryInfoInput input____.countryInfo |> Just ) ]


buildCreateTransactionInput :
    CreateTransactionInputRequiredFields
    -> (CreateTransactionInputOptionalFields -> CreateTransactionInputOptionalFields)
    -> CreateTransactionInput
buildCreateTransactionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, transaction = required____.transaction }


type alias CreateTransactionInputRequiredFields =
    { transaction : TransactionInput }


type alias CreateTransactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateTransactionInput input object.
-}
type alias CreateTransactionInput =
    { clientMutationId : OptionalArgument String
    , transaction : TransactionInput
    }


{-| Encode a CreateTransactionInput into a value that can be used as an argument.
-}
encodeCreateTransactionInput : CreateTransactionInput -> Value
encodeCreateTransactionInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "transaction", encodeTransactionInput input____.transaction |> Just ) ]


buildCreateUserInput :
    CreateUserInputRequiredFields
    -> (CreateUserInputOptionalFields -> CreateUserInputOptionalFields)
    -> CreateUserInput
buildCreateUserInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, user = required____.user }


type alias CreateUserInputRequiredFields =
    { user : UserInput }


type alias CreateUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateUserInput input object.
-}
type alias CreateUserInput =
    { clientMutationId : OptionalArgument String
    , user : UserInput
    }


{-| Encode a CreateUserInput into a value that can be used as an argument.
-}
encodeCreateUserInput : CreateUserInput -> Value
encodeCreateUserInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "user", encodeUserInput input____.user |> Just ) ]


buildCreateWeatherDatumInput :
    CreateWeatherDatumInputRequiredFields
    -> (CreateWeatherDatumInputOptionalFields -> CreateWeatherDatumInputOptionalFields)
    -> CreateWeatherDatumInput
buildCreateWeatherDatumInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, weatherDatum = required____.weatherDatum }


type alias CreateWeatherDatumInputRequiredFields =
    { weatherDatum : WeatherDatumInput }


type alias CreateWeatherDatumInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateWeatherDatumInput input object.
-}
type alias CreateWeatherDatumInput =
    { clientMutationId : OptionalArgument String
    , weatherDatum : WeatherDatumInput
    }


{-| Encode a CreateWeatherDatumInput into a value that can be used as an argument.
-}
encodeCreateWeatherDatumInput : CreateWeatherDatumInput -> Value
encodeCreateWeatherDatumInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "weatherDatum", encodeWeatherDatumInput input____.weatherDatum |> Just ) ]


buildDeleteCountryInfoByIdInput :
    DeleteCountryInfoByIdInputRequiredFields
    -> (DeleteCountryInfoByIdInputOptionalFields -> DeleteCountryInfoByIdInputOptionalFields)
    -> DeleteCountryInfoByIdInput
buildDeleteCountryInfoByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, id = required____.id }


type alias DeleteCountryInfoByIdInputRequiredFields =
    { id : Int }


type alias DeleteCountryInfoByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteCountryInfoByIdInput input object.
-}
type alias DeleteCountryInfoByIdInput =
    { clientMutationId : OptionalArgument String
    , id : Int
    }


{-| Encode a DeleteCountryInfoByIdInput into a value that can be used as an argument.
-}
encodeDeleteCountryInfoByIdInput : DeleteCountryInfoByIdInput -> Value
encodeDeleteCountryInfoByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "id", Encode.int input____.id |> Just ) ]


buildDeleteCountryInfoInput :
    DeleteCountryInfoInputRequiredFields
    -> (DeleteCountryInfoInputOptionalFields -> DeleteCountryInfoInputOptionalFields)
    -> DeleteCountryInfoInput
buildDeleteCountryInfoInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId }


type alias DeleteCountryInfoInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id }


type alias DeleteCountryInfoInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteCountryInfoInput input object.
-}
type alias DeleteCountryInfoInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    }


{-| Encode a DeleteCountryInfoInput into a value that can be used as an argument.
-}
encodeDeleteCountryInfoInput : DeleteCountryInfoInput -> Value
encodeDeleteCountryInfoInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ) ]


buildDeleteTransactionByIdInput :
    DeleteTransactionByIdInputRequiredFields
    -> (DeleteTransactionByIdInputOptionalFields -> DeleteTransactionByIdInputOptionalFields)
    -> DeleteTransactionByIdInput
buildDeleteTransactionByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, id = required____.id }


type alias DeleteTransactionByIdInputRequiredFields =
    { id : Int }


type alias DeleteTransactionByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteTransactionByIdInput input object.
-}
type alias DeleteTransactionByIdInput =
    { clientMutationId : OptionalArgument String
    , id : Int
    }


{-| Encode a DeleteTransactionByIdInput into a value that can be used as an argument.
-}
encodeDeleteTransactionByIdInput : DeleteTransactionByIdInput -> Value
encodeDeleteTransactionByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "id", Encode.int input____.id |> Just ) ]


buildDeleteTransactionInput :
    DeleteTransactionInputRequiredFields
    -> (DeleteTransactionInputOptionalFields -> DeleteTransactionInputOptionalFields)
    -> DeleteTransactionInput
buildDeleteTransactionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId }


type alias DeleteTransactionInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id }


type alias DeleteTransactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteTransactionInput input object.
-}
type alias DeleteTransactionInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    }


{-| Encode a DeleteTransactionInput into a value that can be used as an argument.
-}
encodeDeleteTransactionInput : DeleteTransactionInput -> Value
encodeDeleteTransactionInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ) ]


buildDeleteUserByEmailInput :
    DeleteUserByEmailInputRequiredFields
    -> (DeleteUserByEmailInputOptionalFields -> DeleteUserByEmailInputOptionalFields)
    -> DeleteUserByEmailInput
buildDeleteUserByEmailInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, email = required____.email }


type alias DeleteUserByEmailInputRequiredFields =
    { email : String }


type alias DeleteUserByEmailInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteUserByEmailInput input object.
-}
type alias DeleteUserByEmailInput =
    { clientMutationId : OptionalArgument String
    , email : String
    }


{-| Encode a DeleteUserByEmailInput into a value that can be used as an argument.
-}
encodeDeleteUserByEmailInput : DeleteUserByEmailInput -> Value
encodeDeleteUserByEmailInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "email", Encode.string input____.email |> Just ) ]


buildDeleteUserByIdInput :
    DeleteUserByIdInputRequiredFields
    -> (DeleteUserByIdInputOptionalFields -> DeleteUserByIdInputOptionalFields)
    -> DeleteUserByIdInput
buildDeleteUserByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, id = required____.id }


type alias DeleteUserByIdInputRequiredFields =
    { id : Int }


type alias DeleteUserByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteUserByIdInput input object.
-}
type alias DeleteUserByIdInput =
    { clientMutationId : OptionalArgument String
    , id : Int
    }


{-| Encode a DeleteUserByIdInput into a value that can be used as an argument.
-}
encodeDeleteUserByIdInput : DeleteUserByIdInput -> Value
encodeDeleteUserByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "id", Encode.int input____.id |> Just ) ]


buildDeleteUserByUsernameInput :
    DeleteUserByUsernameInputRequiredFields
    -> (DeleteUserByUsernameInputOptionalFields -> DeleteUserByUsernameInputOptionalFields)
    -> DeleteUserByUsernameInput
buildDeleteUserByUsernameInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, username = required____.username }


type alias DeleteUserByUsernameInputRequiredFields =
    { username : String }


type alias DeleteUserByUsernameInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteUserByUsernameInput input object.
-}
type alias DeleteUserByUsernameInput =
    { clientMutationId : OptionalArgument String
    , username : String
    }


{-| Encode a DeleteUserByUsernameInput into a value that can be used as an argument.
-}
encodeDeleteUserByUsernameInput : DeleteUserByUsernameInput -> Value
encodeDeleteUserByUsernameInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "username", Encode.string input____.username |> Just ) ]


buildDeleteUserInput :
    DeleteUserInputRequiredFields
    -> (DeleteUserInputOptionalFields -> DeleteUserInputOptionalFields)
    -> DeleteUserInput
buildDeleteUserInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId }


type alias DeleteUserInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id }


type alias DeleteUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteUserInput input object.
-}
type alias DeleteUserInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    }


{-| Encode a DeleteUserInput into a value that can be used as an argument.
-}
encodeDeleteUserInput : DeleteUserInput -> Value
encodeDeleteUserInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ) ]


buildDeleteWeatherDatumByIdInput :
    DeleteWeatherDatumByIdInputRequiredFields
    -> (DeleteWeatherDatumByIdInputOptionalFields -> DeleteWeatherDatumByIdInputOptionalFields)
    -> DeleteWeatherDatumByIdInput
buildDeleteWeatherDatumByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, id = required____.id }


type alias DeleteWeatherDatumByIdInputRequiredFields =
    { id : Int }


type alias DeleteWeatherDatumByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteWeatherDatumByIdInput input object.
-}
type alias DeleteWeatherDatumByIdInput =
    { clientMutationId : OptionalArgument String
    , id : Int
    }


{-| Encode a DeleteWeatherDatumByIdInput into a value that can be used as an argument.
-}
encodeDeleteWeatherDatumByIdInput : DeleteWeatherDatumByIdInput -> Value
encodeDeleteWeatherDatumByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "id", Encode.int input____.id |> Just ) ]


buildDeleteWeatherDatumInput :
    DeleteWeatherDatumInputRequiredFields
    -> (DeleteWeatherDatumInputOptionalFields -> DeleteWeatherDatumInputOptionalFields)
    -> DeleteWeatherDatumInput
buildDeleteWeatherDatumInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId }


type alias DeleteWeatherDatumInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id }


type alias DeleteWeatherDatumInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteWeatherDatumInput input object.
-}
type alias DeleteWeatherDatumInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    }


{-| Encode a DeleteWeatherDatumInput into a value that can be used as an argument.
-}
encodeDeleteWeatherDatumInput : DeleteWeatherDatumInput -> Value
encodeDeleteWeatherDatumInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ) ]


buildTransactionCondition :
    (TransactionConditionOptionalFields -> TransactionConditionOptionalFields)
    -> TransactionCondition
buildTransactionCondition fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientId = Absent, amount = Absent, description = Absent, transactionDate = Absent }
    in
    { id = optionals____.id, clientId = optionals____.clientId, amount = optionals____.amount, description = optionals____.description, transactionDate = optionals____.transactionDate }


type alias TransactionConditionOptionalFields =
    { id : OptionalArgument Int
    , clientId : OptionalArgument Int
    , amount : OptionalArgument Api.ScalarCodecs.BigFloat
    , description : OptionalArgument String
    , transactionDate : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the TransactionCondition input object.
-}
type alias TransactionCondition =
    { id : OptionalArgument Int
    , clientId : OptionalArgument Int
    , amount : OptionalArgument Api.ScalarCodecs.BigFloat
    , description : OptionalArgument String
    , transactionDate : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a TransactionCondition into a value that can be used as an argument.
-}
encodeTransactionCondition : TransactionCondition -> Value
encodeTransactionCondition input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "clientId", Encode.int |> Encode.optional input____.clientId ), ( "amount", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecBigFloat) |> Encode.optional input____.amount ), ( "description", Encode.string |> Encode.optional input____.description ), ( "transactionDate", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.transactionDate ) ]


buildTransactionInput :
    TransactionInputRequiredFields
    -> (TransactionInputOptionalFields -> TransactionInputOptionalFields)
    -> TransactionInput
buildTransactionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientId = Absent, description = Absent, transactionDate = Absent }
    in
    { id = optionals____.id, clientId = optionals____.clientId, amount = required____.amount, description = optionals____.description, transactionDate = optionals____.transactionDate }


type alias TransactionInputRequiredFields =
    { amount : Api.ScalarCodecs.BigFloat }


type alias TransactionInputOptionalFields =
    { id : OptionalArgument Int
    , clientId : OptionalArgument Int
    , description : OptionalArgument String
    , transactionDate : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the TransactionInput input object.
-}
type alias TransactionInput =
    { id : OptionalArgument Int
    , clientId : OptionalArgument Int
    , amount : Api.ScalarCodecs.BigFloat
    , description : OptionalArgument String
    , transactionDate : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a TransactionInput into a value that can be used as an argument.
-}
encodeTransactionInput : TransactionInput -> Value
encodeTransactionInput input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "clientId", Encode.int |> Encode.optional input____.clientId ), ( "amount", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecBigFloat) input____.amount |> Just ), ( "description", Encode.string |> Encode.optional input____.description ), ( "transactionDate", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.transactionDate ) ]


buildTransactionPatch :
    (TransactionPatchOptionalFields -> TransactionPatchOptionalFields)
    -> TransactionPatch
buildTransactionPatch fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientId = Absent, amount = Absent, description = Absent, transactionDate = Absent }
    in
    { id = optionals____.id, clientId = optionals____.clientId, amount = optionals____.amount, description = optionals____.description, transactionDate = optionals____.transactionDate }


type alias TransactionPatchOptionalFields =
    { id : OptionalArgument Int
    , clientId : OptionalArgument Int
    , amount : OptionalArgument Api.ScalarCodecs.BigFloat
    , description : OptionalArgument String
    , transactionDate : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the TransactionPatch input object.
-}
type alias TransactionPatch =
    { id : OptionalArgument Int
    , clientId : OptionalArgument Int
    , amount : OptionalArgument Api.ScalarCodecs.BigFloat
    , description : OptionalArgument String
    , transactionDate : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a TransactionPatch into a value that can be used as an argument.
-}
encodeTransactionPatch : TransactionPatch -> Value
encodeTransactionPatch input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "clientId", Encode.int |> Encode.optional input____.clientId ), ( "amount", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecBigFloat) |> Encode.optional input____.amount ), ( "description", Encode.string |> Encode.optional input____.description ), ( "transactionDate", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.transactionDate ) ]


buildUpdateCountryInfoByIdInput :
    UpdateCountryInfoByIdInputRequiredFields
    -> (UpdateCountryInfoByIdInputOptionalFields -> UpdateCountryInfoByIdInputOptionalFields)
    -> UpdateCountryInfoByIdInput
buildUpdateCountryInfoByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, countryInfoPatch = required____.countryInfoPatch, id = required____.id }


type alias UpdateCountryInfoByIdInputRequiredFields =
    { countryInfoPatch : CountryInfoPatch
    , id : Int
    }


type alias UpdateCountryInfoByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateCountryInfoByIdInput input object.
-}
type alias UpdateCountryInfoByIdInput =
    { clientMutationId : OptionalArgument String
    , countryInfoPatch : CountryInfoPatch
    , id : Int
    }


{-| Encode a UpdateCountryInfoByIdInput into a value that can be used as an argument.
-}
encodeUpdateCountryInfoByIdInput : UpdateCountryInfoByIdInput -> Value
encodeUpdateCountryInfoByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "countryInfoPatch", encodeCountryInfoPatch input____.countryInfoPatch |> Just ), ( "id", Encode.int input____.id |> Just ) ]


buildUpdateCountryInfoInput :
    UpdateCountryInfoInputRequiredFields
    -> (UpdateCountryInfoInputOptionalFields -> UpdateCountryInfoInputOptionalFields)
    -> UpdateCountryInfoInput
buildUpdateCountryInfoInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId, countryInfoPatch = required____.countryInfoPatch }


type alias UpdateCountryInfoInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id
    , countryInfoPatch : CountryInfoPatch
    }


type alias UpdateCountryInfoInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateCountryInfoInput input object.
-}
type alias UpdateCountryInfoInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    , countryInfoPatch : CountryInfoPatch
    }


{-| Encode a UpdateCountryInfoInput into a value that can be used as an argument.
-}
encodeUpdateCountryInfoInput : UpdateCountryInfoInput -> Value
encodeUpdateCountryInfoInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ), ( "countryInfoPatch", encodeCountryInfoPatch input____.countryInfoPatch |> Just ) ]


buildUpdateTransactionByIdInput :
    UpdateTransactionByIdInputRequiredFields
    -> (UpdateTransactionByIdInputOptionalFields -> UpdateTransactionByIdInputOptionalFields)
    -> UpdateTransactionByIdInput
buildUpdateTransactionByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, transactionPatch = required____.transactionPatch, id = required____.id }


type alias UpdateTransactionByIdInputRequiredFields =
    { transactionPatch : TransactionPatch
    , id : Int
    }


type alias UpdateTransactionByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateTransactionByIdInput input object.
-}
type alias UpdateTransactionByIdInput =
    { clientMutationId : OptionalArgument String
    , transactionPatch : TransactionPatch
    , id : Int
    }


{-| Encode a UpdateTransactionByIdInput into a value that can be used as an argument.
-}
encodeUpdateTransactionByIdInput : UpdateTransactionByIdInput -> Value
encodeUpdateTransactionByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "transactionPatch", encodeTransactionPatch input____.transactionPatch |> Just ), ( "id", Encode.int input____.id |> Just ) ]


buildUpdateTransactionInput :
    UpdateTransactionInputRequiredFields
    -> (UpdateTransactionInputOptionalFields -> UpdateTransactionInputOptionalFields)
    -> UpdateTransactionInput
buildUpdateTransactionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId, transactionPatch = required____.transactionPatch }


type alias UpdateTransactionInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id
    , transactionPatch : TransactionPatch
    }


type alias UpdateTransactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateTransactionInput input object.
-}
type alias UpdateTransactionInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    , transactionPatch : TransactionPatch
    }


{-| Encode a UpdateTransactionInput into a value that can be used as an argument.
-}
encodeUpdateTransactionInput : UpdateTransactionInput -> Value
encodeUpdateTransactionInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ), ( "transactionPatch", encodeTransactionPatch input____.transactionPatch |> Just ) ]


buildUpdateUserByEmailInput :
    UpdateUserByEmailInputRequiredFields
    -> (UpdateUserByEmailInputOptionalFields -> UpdateUserByEmailInputOptionalFields)
    -> UpdateUserByEmailInput
buildUpdateUserByEmailInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, userPatch = required____.userPatch, email = required____.email }


type alias UpdateUserByEmailInputRequiredFields =
    { userPatch : UserPatch
    , email : String
    }


type alias UpdateUserByEmailInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserByEmailInput input object.
-}
type alias UpdateUserByEmailInput =
    { clientMutationId : OptionalArgument String
    , userPatch : UserPatch
    , email : String
    }


{-| Encode a UpdateUserByEmailInput into a value that can be used as an argument.
-}
encodeUpdateUserByEmailInput : UpdateUserByEmailInput -> Value
encodeUpdateUserByEmailInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "userPatch", encodeUserPatch input____.userPatch |> Just ), ( "email", Encode.string input____.email |> Just ) ]


buildUpdateUserByIdInput :
    UpdateUserByIdInputRequiredFields
    -> (UpdateUserByIdInputOptionalFields -> UpdateUserByIdInputOptionalFields)
    -> UpdateUserByIdInput
buildUpdateUserByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, userPatch = required____.userPatch, id = required____.id }


type alias UpdateUserByIdInputRequiredFields =
    { userPatch : UserPatch
    , id : Int
    }


type alias UpdateUserByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserByIdInput input object.
-}
type alias UpdateUserByIdInput =
    { clientMutationId : OptionalArgument String
    , userPatch : UserPatch
    , id : Int
    }


{-| Encode a UpdateUserByIdInput into a value that can be used as an argument.
-}
encodeUpdateUserByIdInput : UpdateUserByIdInput -> Value
encodeUpdateUserByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "userPatch", encodeUserPatch input____.userPatch |> Just ), ( "id", Encode.int input____.id |> Just ) ]


buildUpdateUserByUsernameInput :
    UpdateUserByUsernameInputRequiredFields
    -> (UpdateUserByUsernameInputOptionalFields -> UpdateUserByUsernameInputOptionalFields)
    -> UpdateUserByUsernameInput
buildUpdateUserByUsernameInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, userPatch = required____.userPatch, username = required____.username }


type alias UpdateUserByUsernameInputRequiredFields =
    { userPatch : UserPatch
    , username : String
    }


type alias UpdateUserByUsernameInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserByUsernameInput input object.
-}
type alias UpdateUserByUsernameInput =
    { clientMutationId : OptionalArgument String
    , userPatch : UserPatch
    , username : String
    }


{-| Encode a UpdateUserByUsernameInput into a value that can be used as an argument.
-}
encodeUpdateUserByUsernameInput : UpdateUserByUsernameInput -> Value
encodeUpdateUserByUsernameInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "userPatch", encodeUserPatch input____.userPatch |> Just ), ( "username", Encode.string input____.username |> Just ) ]


buildUpdateUserInput :
    UpdateUserInputRequiredFields
    -> (UpdateUserInputOptionalFields -> UpdateUserInputOptionalFields)
    -> UpdateUserInput
buildUpdateUserInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId, userPatch = required____.userPatch }


type alias UpdateUserInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id
    , userPatch : UserPatch
    }


type alias UpdateUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserInput input object.
-}
type alias UpdateUserInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    , userPatch : UserPatch
    }


{-| Encode a UpdateUserInput into a value that can be used as an argument.
-}
encodeUpdateUserInput : UpdateUserInput -> Value
encodeUpdateUserInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ), ( "userPatch", encodeUserPatch input____.userPatch |> Just ) ]


buildUpdateWeatherDatumByIdInput :
    UpdateWeatherDatumByIdInputRequiredFields
    -> (UpdateWeatherDatumByIdInputOptionalFields -> UpdateWeatherDatumByIdInputOptionalFields)
    -> UpdateWeatherDatumByIdInput
buildUpdateWeatherDatumByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, weatherDatumPatch = required____.weatherDatumPatch, id = required____.id }


type alias UpdateWeatherDatumByIdInputRequiredFields =
    { weatherDatumPatch : WeatherDatumPatch
    , id : Int
    }


type alias UpdateWeatherDatumByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateWeatherDatumByIdInput input object.
-}
type alias UpdateWeatherDatumByIdInput =
    { clientMutationId : OptionalArgument String
    , weatherDatumPatch : WeatherDatumPatch
    , id : Int
    }


{-| Encode a UpdateWeatherDatumByIdInput into a value that can be used as an argument.
-}
encodeUpdateWeatherDatumByIdInput : UpdateWeatherDatumByIdInput -> Value
encodeUpdateWeatherDatumByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "weatherDatumPatch", encodeWeatherDatumPatch input____.weatherDatumPatch |> Just ), ( "id", Encode.int input____.id |> Just ) ]


buildUpdateWeatherDatumInput :
    UpdateWeatherDatumInputRequiredFields
    -> (UpdateWeatherDatumInputOptionalFields -> UpdateWeatherDatumInputOptionalFields)
    -> UpdateWeatherDatumInput
buildUpdateWeatherDatumInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId, weatherDatumPatch = required____.weatherDatumPatch }


type alias UpdateWeatherDatumInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id
    , weatherDatumPatch : WeatherDatumPatch
    }


type alias UpdateWeatherDatumInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateWeatherDatumInput input object.
-}
type alias UpdateWeatherDatumInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    , weatherDatumPatch : WeatherDatumPatch
    }


{-| Encode a UpdateWeatherDatumInput into a value that can be used as an argument.
-}
encodeUpdateWeatherDatumInput : UpdateWeatherDatumInput -> Value
encodeUpdateWeatherDatumInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ), ( "weatherDatumPatch", encodeWeatherDatumPatch input____.weatherDatumPatch |> Just ) ]


buildUserCondition :
    (UserConditionOptionalFields -> UserConditionOptionalFields)
    -> UserCondition
buildUserCondition fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, username = Absent, email = Absent, createdAt = Absent }
    in
    { id = optionals____.id, username = optionals____.username, email = optionals____.email, createdAt = optionals____.createdAt }


type alias UserConditionOptionalFields =
    { id : OptionalArgument Int
    , username : OptionalArgument String
    , email : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the UserCondition input object.
-}
type alias UserCondition =
    { id : OptionalArgument Int
    , username : OptionalArgument String
    , email : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a UserCondition into a value that can be used as an argument.
-}
encodeUserCondition : UserCondition -> Value
encodeUserCondition input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "username", Encode.string |> Encode.optional input____.username ), ( "email", Encode.string |> Encode.optional input____.email ), ( "createdAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildUserInput :
    UserInputRequiredFields
    -> (UserInputOptionalFields -> UserInputOptionalFields)
    -> UserInput
buildUserInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, createdAt = Absent }
    in
    { id = optionals____.id, username = required____.username, email = required____.email, createdAt = optionals____.createdAt }


type alias UserInputRequiredFields =
    { username : String
    , email : String
    }


type alias UserInputOptionalFields =
    { id : OptionalArgument Int
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the UserInput input object.
-}
type alias UserInput =
    { id : OptionalArgument Int
    , username : String
    , email : String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a UserInput into a value that can be used as an argument.
-}
encodeUserInput : UserInput -> Value
encodeUserInput input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "username", Encode.string input____.username |> Just ), ( "email", Encode.string input____.email |> Just ), ( "createdAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildUserPatch :
    (UserPatchOptionalFields -> UserPatchOptionalFields)
    -> UserPatch
buildUserPatch fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, username = Absent, email = Absent, createdAt = Absent }
    in
    { id = optionals____.id, username = optionals____.username, email = optionals____.email, createdAt = optionals____.createdAt }


type alias UserPatchOptionalFields =
    { id : OptionalArgument Int
    , username : OptionalArgument String
    , email : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the UserPatch input object.
-}
type alias UserPatch =
    { id : OptionalArgument Int
    , username : OptionalArgument String
    , email : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a UserPatch into a value that can be used as an argument.
-}
encodeUserPatch : UserPatch -> Value
encodeUserPatch input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "username", Encode.string |> Encode.optional input____.username ), ( "email", Encode.string |> Encode.optional input____.email ), ( "createdAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildWeatherDatumCondition :
    (WeatherDatumConditionOptionalFields -> WeatherDatumConditionOptionalFields)
    -> WeatherDatumCondition
buildWeatherDatumCondition fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, location = Absent, time = Absent, wind = Absent, visibility = Absent, temperature = Absent, dewPoint = Absent, relativeHumidity = Absent, pressure = Absent, createdAt = Absent }
    in
    { id = optionals____.id, location = optionals____.location, time = optionals____.time, wind = optionals____.wind, visibility = optionals____.visibility, temperature = optionals____.temperature, dewPoint = optionals____.dewPoint, relativeHumidity = optionals____.relativeHumidity, pressure = optionals____.pressure, createdAt = optionals____.createdAt }


type alias WeatherDatumConditionOptionalFields =
    { id : OptionalArgument Int
    , location : OptionalArgument String
    , time : OptionalArgument Api.ScalarCodecs.Datetime
    , wind : OptionalArgument String
    , visibility : OptionalArgument String
    , temperature : OptionalArgument String
    , dewPoint : OptionalArgument String
    , relativeHumidity : OptionalArgument String
    , pressure : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the WeatherDatumCondition input object.
-}
type alias WeatherDatumCondition =
    { id : OptionalArgument Int
    , location : OptionalArgument String
    , time : OptionalArgument Api.ScalarCodecs.Datetime
    , wind : OptionalArgument String
    , visibility : OptionalArgument String
    , temperature : OptionalArgument String
    , dewPoint : OptionalArgument String
    , relativeHumidity : OptionalArgument String
    , pressure : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a WeatherDatumCondition into a value that can be used as an argument.
-}
encodeWeatherDatumCondition : WeatherDatumCondition -> Value
encodeWeatherDatumCondition input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "location", Encode.string |> Encode.optional input____.location ), ( "time", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.time ), ( "wind", Encode.string |> Encode.optional input____.wind ), ( "visibility", Encode.string |> Encode.optional input____.visibility ), ( "temperature", Encode.string |> Encode.optional input____.temperature ), ( "dewPoint", Encode.string |> Encode.optional input____.dewPoint ), ( "relativeHumidity", Encode.string |> Encode.optional input____.relativeHumidity ), ( "pressure", Encode.string |> Encode.optional input____.pressure ), ( "createdAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildWeatherDatumInput :
    WeatherDatumInputRequiredFields
    -> (WeatherDatumInputOptionalFields -> WeatherDatumInputOptionalFields)
    -> WeatherDatumInput
buildWeatherDatumInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, wind = Absent, visibility = Absent, temperature = Absent, dewPoint = Absent, relativeHumidity = Absent, pressure = Absent, createdAt = Absent }
    in
    { id = optionals____.id, location = required____.location, time = required____.time, wind = optionals____.wind, visibility = optionals____.visibility, temperature = optionals____.temperature, dewPoint = optionals____.dewPoint, relativeHumidity = optionals____.relativeHumidity, pressure = optionals____.pressure, createdAt = optionals____.createdAt }


type alias WeatherDatumInputRequiredFields =
    { location : String
    , time : Api.ScalarCodecs.Datetime
    }


type alias WeatherDatumInputOptionalFields =
    { id : OptionalArgument Int
    , wind : OptionalArgument String
    , visibility : OptionalArgument String
    , temperature : OptionalArgument String
    , dewPoint : OptionalArgument String
    , relativeHumidity : OptionalArgument String
    , pressure : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the WeatherDatumInput input object.
-}
type alias WeatherDatumInput =
    { id : OptionalArgument Int
    , location : String
    , time : Api.ScalarCodecs.Datetime
    , wind : OptionalArgument String
    , visibility : OptionalArgument String
    , temperature : OptionalArgument String
    , dewPoint : OptionalArgument String
    , relativeHumidity : OptionalArgument String
    , pressure : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a WeatherDatumInput into a value that can be used as an argument.
-}
encodeWeatherDatumInput : WeatherDatumInput -> Value
encodeWeatherDatumInput input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "location", Encode.string input____.location |> Just ), ( "time", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) input____.time |> Just ), ( "wind", Encode.string |> Encode.optional input____.wind ), ( "visibility", Encode.string |> Encode.optional input____.visibility ), ( "temperature", Encode.string |> Encode.optional input____.temperature ), ( "dewPoint", Encode.string |> Encode.optional input____.dewPoint ), ( "relativeHumidity", Encode.string |> Encode.optional input____.relativeHumidity ), ( "pressure", Encode.string |> Encode.optional input____.pressure ), ( "createdAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildWeatherDatumPatch :
    (WeatherDatumPatchOptionalFields -> WeatherDatumPatchOptionalFields)
    -> WeatherDatumPatch
buildWeatherDatumPatch fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, location = Absent, time = Absent, wind = Absent, visibility = Absent, temperature = Absent, dewPoint = Absent, relativeHumidity = Absent, pressure = Absent, createdAt = Absent }
    in
    { id = optionals____.id, location = optionals____.location, time = optionals____.time, wind = optionals____.wind, visibility = optionals____.visibility, temperature = optionals____.temperature, dewPoint = optionals____.dewPoint, relativeHumidity = optionals____.relativeHumidity, pressure = optionals____.pressure, createdAt = optionals____.createdAt }


type alias WeatherDatumPatchOptionalFields =
    { id : OptionalArgument Int
    , location : OptionalArgument String
    , time : OptionalArgument Api.ScalarCodecs.Datetime
    , wind : OptionalArgument String
    , visibility : OptionalArgument String
    , temperature : OptionalArgument String
    , dewPoint : OptionalArgument String
    , relativeHumidity : OptionalArgument String
    , pressure : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the WeatherDatumPatch input object.
-}
type alias WeatherDatumPatch =
    { id : OptionalArgument Int
    , location : OptionalArgument String
    , time : OptionalArgument Api.ScalarCodecs.Datetime
    , wind : OptionalArgument String
    , visibility : OptionalArgument String
    , temperature : OptionalArgument String
    , dewPoint : OptionalArgument String
    , relativeHumidity : OptionalArgument String
    , pressure : OptionalArgument String
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a WeatherDatumPatch into a value that can be used as an argument.
-}
encodeWeatherDatumPatch : WeatherDatumPatch -> Value
encodeWeatherDatumPatch input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "location", Encode.string |> Encode.optional input____.location ), ( "time", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.time ), ( "wind", Encode.string |> Encode.optional input____.wind ), ( "visibility", Encode.string |> Encode.optional input____.visibility ), ( "temperature", Encode.string |> Encode.optional input____.temperature ), ( "dewPoint", Encode.string |> Encode.optional input____.dewPoint ), ( "relativeHumidity", Encode.string |> Encode.optional input____.relativeHumidity ), ( "pressure", Encode.string |> Encode.optional input____.pressure ), ( "createdAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]
