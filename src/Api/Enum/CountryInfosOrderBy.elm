-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.CountryInfosOrderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Methods to use when ordering `CountryInfo`.
-}
type CountryInfosOrderBy
    = Natural
    | IdAsc
    | IdDesc
    | NameAsc
    | NameDesc
    | CapitalAsc
    | CapitalDesc
    | PhoneCodeAsc
    | PhoneCodeDesc
    | PrimaryKeyAsc
    | PrimaryKeyDesc


list : List CountryInfosOrderBy
list =
    [ Natural, IdAsc, IdDesc, NameAsc, NameDesc, CapitalAsc, CapitalDesc, PhoneCodeAsc, PhoneCodeDesc, PrimaryKeyAsc, PrimaryKeyDesc ]


decoder : Decoder CountryInfosOrderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NATURAL" ->
                        Decode.succeed Natural

                    "ID_ASC" ->
                        Decode.succeed IdAsc

                    "ID_DESC" ->
                        Decode.succeed IdDesc

                    "NAME_ASC" ->
                        Decode.succeed NameAsc

                    "NAME_DESC" ->
                        Decode.succeed NameDesc

                    "CAPITAL_ASC" ->
                        Decode.succeed CapitalAsc

                    "CAPITAL_DESC" ->
                        Decode.succeed CapitalDesc

                    "PHONE_CODE_ASC" ->
                        Decode.succeed PhoneCodeAsc

                    "PHONE_CODE_DESC" ->
                        Decode.succeed PhoneCodeDesc

                    "PRIMARY_KEY_ASC" ->
                        Decode.succeed PrimaryKeyAsc

                    "PRIMARY_KEY_DESC" ->
                        Decode.succeed PrimaryKeyDesc

                    _ ->
                        Decode.fail ("Invalid CountryInfosOrderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CountryInfosOrderBy -> String
toString enum____ =
    case enum____ of
        Natural ->
            "NATURAL"

        IdAsc ->
            "ID_ASC"

        IdDesc ->
            "ID_DESC"

        NameAsc ->
            "NAME_ASC"

        NameDesc ->
            "NAME_DESC"

        CapitalAsc ->
            "CAPITAL_ASC"

        CapitalDesc ->
            "CAPITAL_DESC"

        PhoneCodeAsc ->
            "PHONE_CODE_ASC"

        PhoneCodeDesc ->
            "PHONE_CODE_DESC"

        PrimaryKeyAsc ->
            "PRIMARY_KEY_ASC"

        PrimaryKeyDesc ->
            "PRIMARY_KEY_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CountryInfosOrderBy
fromString enumString____ =
    case enumString____ of
        "NATURAL" ->
            Just Natural

        "ID_ASC" ->
            Just IdAsc

        "ID_DESC" ->
            Just IdDesc

        "NAME_ASC" ->
            Just NameAsc

        "NAME_DESC" ->
            Just NameDesc

        "CAPITAL_ASC" ->
            Just CapitalAsc

        "CAPITAL_DESC" ->
            Just CapitalDesc

        "PHONE_CODE_ASC" ->
            Just PhoneCodeAsc

        "PHONE_CODE_DESC" ->
            Just PhoneCodeDesc

        "PRIMARY_KEY_ASC" ->
            Just PrimaryKeyAsc

        "PRIMARY_KEY_DESC" ->
            Just PrimaryKeyDesc

        _ ->
            Nothing
