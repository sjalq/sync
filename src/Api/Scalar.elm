-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Scalar exposing (BigFloat(..), Codecs, Cursor(..), Datetime(..), Id(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type BigFloat
    = BigFloat String


type Cursor
    = Cursor String


type Datetime
    = Datetime String


type Id
    = Id String


defineCodecs :
    { codecBigFloat : Codec valueBigFloat
    , codecCursor : Codec valueCursor
    , codecDatetime : Codec valueDatetime
    , codecId : Codec valueId
    }
    -> Codecs valueBigFloat valueCursor valueDatetime valueId
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueBigFloat valueCursor valueDatetime valueId
    ->
        { codecBigFloat : Codec valueBigFloat
        , codecCursor : Codec valueCursor
        , codecDatetime : Codec valueDatetime
        , codecId : Codec valueId
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueBigFloat valueCursor valueDatetime valueId -> Codec getterValue)
    -> Codecs valueBigFloat valueCursor valueDatetime valueId
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueBigFloat valueCursor valueDatetime valueId
    = Codecs (RawCodecs valueBigFloat valueCursor valueDatetime valueId)


type alias RawCodecs valueBigFloat valueCursor valueDatetime valueId =
    { codecBigFloat : Codec valueBigFloat
    , codecCursor : Codec valueCursor
    , codecDatetime : Codec valueDatetime
    , codecId : Codec valueId
    }


defaultCodecs : RawCodecs BigFloat Cursor Datetime Id
defaultCodecs =
    { codecBigFloat =
        { encoder = \(BigFloat raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map BigFloat
        }
    , codecCursor =
        { encoder = \(Cursor raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Cursor
        }
    , codecDatetime =
        { encoder = \(Datetime raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Datetime
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    }
